[user]

  name  = AUTHOR_NAME
  email = AUTHOR_EMAIL

  # Don't guess the user's identity.
  # https://github.com/git/git/blob/90f7b16b3adc78d4bbabbd426fb69aa78c714f71/Documentation/config.txt#L2847-L2855
  useConfigOnly = true

[GITHUB]

[core]

  editor = GIT_EDITOR
  excludesfile = ~/.cvsignore
  attributesfile = ~/.gitattributes
  autocrlf = input
  abbrev = 12
  pager = less -FRSX

  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

  # Make `git rebase` safer on OS X
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  # Prevent showing files whose names contain non-ASCII symbols as unversioned.
  # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
  precomposeunicode = false

[alias]

  a      = commit --amend
  br     = branch -av
  ca     = !git add -A && git commit                # Commit all changes.
  ci     = commit
  co     = checkout
  cp     = cherry-pick
  d      = diff
  dc     = diff --cached
  df     = diff --word-diff
  g      = log --graph --pretty=custom              # Show custom graph.
  l      = log --pretty=custom                      # Show custom log.
  ls     = log --pretty=custom                      # Show custom log.
  lc     = shortlog --summary --numbered            # List contributors.
  ll     = log --pretty=custom --decorate --numstat
  p      = push
  r      = rebase
  rlc    = reset --hard HEAD~1                      # Remove last commit.
  sa     = stash apply
  sc     = stash clear
  sd     = stash drop
  sl     = stash list
  sp     = stash pop
  ss     = stash save
  sw     = stash show
  st     = status
  tags   = tag -l
  ulc    = reset --soft HEAD~1                      # Undo last commit.
  un     = reset HEAD --
  fuckit = !git reset --hard HEAD && git clean -df

  #----------------------------------------------------------------------------#

  # Find commits by source code.
  cc = "!f() { \
    git log --pretty=custom --decorate --date=short -S\"$1\"; \
  }; f"

  # Find commits by commit message.
  cm = "!f() { \
    git log --pretty=custom --decorate --date=short --grep=\"$1\"; \
  }; f"

  # List remote branches.
  lrb = "!f() { \
    remote="${1:-origin}"; \
    git ls-remote --heads "$remote"; \
  }; f"

  # Merge GitHub pull request on top of the current branch or,
  # if a branch name is specified, on top of the specified branch.
  mpr = "!f() { \
    declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
    declare branch=\"${2:-$currentBranch}\"; \
    if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
      git fetch origin refs/pull/$1/head:pr/$1 && \
      git checkout -B $branch && \
      git rebase $branch pr/$1 && \
      git checkout -B $branch && \
      git merge pr/$1 && \
      git branch -D pr/$1 && \
      git commit --amend -m \"$(git log -1 --pretty=%B)\n\nClose #$1\"; \
    fi \
  }; f"

  # Remove the tag with the specified tag name if
  # exists and tag the latest commit with that name.
  retag = "!f() { \
    git tag -d "$1" &> /dev/null; \
    git tag $1; \
  }; f"

[branch "master"]

  remote = origin
  merge  = refs/heads/master

[color]

  ui = true

[color "branch"]

  current = green bold
  local   = green
  remote  = yellow

[color "diff"]

  frag = magenta
  meta = yellow
  new  = green
  old  = red

[color "status"]

  added     = green reverse
  changed   = yellow reverse
  untracked = red reverse

[diff "bin"]

  # Use `hexdump` to diff binary files.
  textconv = hexdump -v -C

[gitflow "prefix"]

  feature    = feature/
  release    = release/
  hotfix     = hotfix/
  support    = support/
  versiontag =

[pretty]

  custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"
  #                     │        │            │            │             └─ author name
  #                     │        │            │            └─ message
  #                     │        │            └─ date (relative)
  #                     │        └─ decorations (branch, heads or tags)
  #                     └─ hash (abbreviated)

[push]

  # Make `git push` automatically push relevant
  # annotated tags when pushing branches out.
  followTags = true

[include]

  # Load local configs.
  # https://git-scm.com/docs/git-config#_includes
  #
  # [!] The following needs to remain at the end of this file in
  #     order to allow any of the above configs to be overwritten
  #     by the local ones
  path = ~/.gitconfig.local
